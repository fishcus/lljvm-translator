#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os, re, subprocess

from waflib.Tools import waf_unit_test
from distutils.version import StrictVersion
from env import *
from sys import platform

def command(cmd):
  return subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True).communicate()[0]

def llvm_config(options):
  llvm_options = re.split("[\s\n]+", command('%s %s' % (LLVM_CONFIG, options)))
  options = list(llvm_options)
  for opt in llvm_options:
    # `llvm-config` possible disable C++ exceptions, so we explicitly set it here
    if opt == "-fno-exceptions":
      options.remove(opt)
  return options

def options(opt):
  opt.load('compiler_cxx waf_unit_test');

def configure(ctx):
  ctx.load('compiler_cxx waf_unit_test');

  # Checks if llvm-config can be executed
  ctx.find_program(LLVM_CONFIG)

  # Checks if this platform supported
  if platform == 'linux' or platform == 'linux2':
    ctx.env['LLJVM_COMPILE_OS'] = 'Linux'
    ctx.env['LLJVM_COMPILE_SHLIB_SUFFIX'] = 'so'
  elif platform == 'darwin':
    ctx.env['LLJVM_COMPILE_OS'] = 'Mac'
    ctx.env['LLJVM_COMPILE_SHLIB_SUFFIX'] = 'dylib'
  else:
    ctx.fatal('OS must be linux or darwin, but %s found' % platform)

  # Since we use C++ exceptions, so we explicitly set it here
  ctx.env.append_value('CXXFLAGS', ['-fcxx-exceptions'])

  # Currently, it only support x86_64 platforms
  ctx.env['LLJVM_COMPILE_ARCH'] = 'x86_64'

  # Checks the LLVM version
  LLVM_VERSION = re.findall("^(\d+.\d+.\d+)", llvm_config('--version')[0])[0]
  if StrictVersion(LLVM_VERSION) < StrictVersion('5.0.0'):
    ctx.fatal('LLVM version must be 5.0+, but LLVM %s found' % LLVM_VERSION)

  # We assume 'llvm-config --system-libs' returns libs below
  ctx.check_cxx(lib = 'm')
  # We need to check the libs below in Linux only
  if ctx.env['LLJVM_COMPILE_OS'] == 'Linux':
    ctx.check_cxx(lib = 'pthread')
    ctx.check_cxx(lib = 'dl')
    ctx.check_cxx(lib = 'rt')
    ctx.check_cxx(lib = 'tinfo')
    # ctx.check_cxx(lib = 'z')

  # Set cxxflags for compiling each source file
  LLVM_CXXFLAGS = ['-I%s/../include' % LLVM_DIR]
  LLVM_CXXFLAGS += llvm_config('--cxxflags')

  # TODO: Needs to statically link BSD libc++
  # LLVM_LINKFLAGS = ['-stdlib=libc++', '-nostdinc++']
  # LLVM_LINKFLAGS += ['-I%s/include/c++/v1' % LLVM_DIR, '-L%s' %LLVM_LIB, '-Wl,-rpath,%s' % LLVM_LIB]

  # Uses a linker option `--whole-archive` to bundle the all the image
  # of static LLVM libraries.
  LLVM_LINKFLAGS = ['-Wl,--whole-archive']
  LLVM_LINKFLAGS += llvm_config('--libfiles engine')

  if ctx.env['LLJVM_COMPILE_OS'] == 'Linux':
    # TODO: Checks these licenses and update the NOTICE file
    # path = ['/usr/lib', '/usr/lib/x86_64-linux-gnu', '/usr/lib64']
    path = ['%s/static-libs' % os.getcwd()]
    # TODO: Needs to statically link these libraries below
    # LLVM_LINKFLAGS += [ctx.find_file('libc++.a', LLVM_LI]
    # LLVM_LINKFLAGS += [ctx.find_file('libpthread.a', path)]
    # LLVM_LINKFLAGS += [ctx.find_file('libdl.a', path)]
    # LLVM_LINKFLAGS += [ctx.find_file('librt.a', path)]
    # LLVM_LINKFLAGS += [ctx.find_file('libm.a', path)]
    # LLVM_LINKFLAGS += [ctx.find_file('libtinfo.a', path)]
    LLVM_LINKFLAGS += [ctx.find_file('libz.a', path)]
    LLVM_LINKFLAGS += ['-Wl,--no-whole-archive']
    # LLVM_LINKFLAGS += ['-pthread', '-ldl', '-lrt', '-lm', '-ltinfo', '-lz']
    LLVM_LINKFLAGS += ['-pthread', '-ldl', '-lrt', '-lm', '-ltinfo']
  else: # For Mac
    path = ['/opt/local/lib']
    LLVM_LINKFLAGS += [ctx.find_file('libncursesw.a', path)]
    LLVM_LINKFLAGS += [ctx.find_file('libz.a', path)]
    LLVM_LINKFLAGS += ['-Wl,--no-whole-archive']
    LLVM_LINKFLAGS += ['-lm']

  ctx.check_cxx(msg = 'Checking for LLVM configurations',
                cxxflags = LLVM_CXXFLAGS,
                linkflags = LLVM_LINKFLAGS,
                uselib_store = 'llvm')

def build(bld):

  # Builds a shared library of LLJVM
  bld.shlib(source = 'backend.cc block.cc branch.cc const.cc function.cc instruction.cc lljvm.cc loadstore.cc \
              name.cc printinst.cc sections.cc types.cc',
            target = 'lljvm',
            includes = '%s/%s' % (JAVAH_DIR, bld.env.LLJVM_COMPILE_OS),
            # linkflags = '-static',
            use = 'llvm',
            uselib_store = 'lljvm')

  # Strips the built library and copys it into src/main/java/lib/
  bld(rule = 'strip ${SRC}; cp ${SRC} ${TGT}',
      source = 'liblljvm.%s' % bld.env.LLJVM_COMPILE_SHLIB_SUFFIX,
      target = '../../../core/src/main/resources/lib/%s/%s/' % (bld.env.LLJVM_COMPILE_OS, bld.env.LLJVM_COMPILE_ARCH))

  # Builds an executable LLJVM program for tests
  bld.program(source = 'main.cc',
              target = 'lljvm-native-test',
              use = 'llvm lljvm')

  # For unit tests
  bld.objects(source = '{0}/src/gtest-all.cc {0}/src/gtest_main.cc'.format(GTEST_DIR),
              target = 'gtest',
              includes = '{0}/include {0}'.format(GTEST_DIR))

  bld.program(features='test',
              source='lljvm_unittest.cc',
              includes = '{0}/include'.format(GTEST_DIR),
              target = 'lljvm_unittest',
              linkflags = bld.env.LLVM_SLIBS,
              use = 'gtest llvm')

  bld.add_post_fun(waf_unit_test.summary)
  bld.add_post_fun(waf_unit_test.set_exit_code)

