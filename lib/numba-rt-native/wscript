#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import platform, numpy, sys, sysconfig

from waflib.Tools import waf_unit_test
from env import *

def options(opt):
  opt.load('compiler_c waf_unit_test');

def configure(ctx):
  ctx.load('compiler_c waf_unit_test');

  # Checks if this platform supported
  if sys.platform == 'linux' or sys.platform == 'linux2':
    ctx.env['NUMBA_RT_COMPILE_OS'] = 'Linux'
    ctx.env['NUMBA_RT_COMPILE_SHLIB_SUFFIX'] = 'so'
  elif sys.platform == 'darwin':
    ctx.env['NUMBA_RT_COMPILE_OS'] = 'Mac'
    ctx.env['NUMBA_RT_COMPILE_SHLIB_SUFFIX'] = 'dylib'
  else:
    ctx.fatal('OS must be linux or darwin, but %s found' % sys.platform)

  # Currently, it only supports x86_64 platforms
  ctx.env['NUMBA_RT_COMPILE_ARCH'] = 'x86_64'

  # Checks the Python version
  if (sys.version_info[0:2] != (2, 7)):
    ctx.fatal('Python version must be 2.7.x, but Python %s found' % platform.python_version())

  # Collects platform-dependent configurations for Python
  PYTHON_INCLUDES = ['%s' % sysconfig.get_paths()['include']]
  PYTHON_INCLUDES += ['%s' % numpy.get_include()]
  # TODO: Workaround for Amazon Linux
  PYTHON_INCLUDES += ['/usr/include/python2.7']

  # We must need to check if `libpython2.7` found in runtime
  PYTHON_LINKFLAGS = ['-lpython2.7', '-pthread', '-ldl', '-lm', '-lutil']
  print sysconfig.get_paths()['stdlib']
  # PYTHON_LINKFLAGS = [ctx.find_file('libpython2.7.a', ['%s/..' % sysconfig.get_paths()['stdlib']])]

  ctx.check_cc(msg = 'Checking for Python configurations',
               includes = PYTHON_INCLUDES,
               linkflags = PYTHON_LINKFLAGS,
               uselib_store = 'python')

def build(bld):

  # Builds a shared library of NUMBA_RT
  bld.shlib(source = 'runtime.c',
            target = 'numba-rt',
            cflags = ['-fno-strict-aliasing', '-O2', '-fwrapv', '-Wall', '-Wstrict-prototypes'],
            includes = ['%s/%s' % (JAVAH_DIR, bld.env.NUMBA_RT_COMPILE_OS)],
            # linkflags = '-static',
            use = 'python')

  # Strips the built library and copys it into src/main/java/lib/
  #
  # To avoid mulformed image errors, we need to strip with options '-S -x':
  #  - https://stackoverflow.com/questions/39381754/malformed-mach-o-image-symbol-table-underruns-linkedit
  bld(rule = 'strip -S -x ${SRC}; cp ${SRC} ${TGT}',
      source = 'libnumba-rt.%s' % bld.env.NUMBA_RT_COMPILE_SHLIB_SUFFIX,
      target = '../../../python/src/main/resources/lib/%s/%s/' % (bld.env.NUMBA_RT_COMPILE_OS, bld.env.NUMBA_RT_COMPILE_ARCH))

